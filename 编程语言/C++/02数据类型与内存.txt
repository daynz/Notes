# 数据类型与内存管理

---

[toc]

## 一、基础数据类型

---

### 1. 整型与扩展

#### (1) 标准整型与符号修饰

```cpp
int a = 42;                      // 默认符号类型（通常4字节）
unsigned int b = 0xFFFFFFFF;     // 无符号类型（值域0~4294967295）
short c = 32767;                 // 至少16位（-32768~32767）
long long d = 9'223'372'036'854'775'807LL;  // C++11单引号分隔符
```

**关键特性**：

- `signed/unsigned`影响二进制最高位的解释方式

- 类型大小顺序：`short ≤ int ≤ long ≤ long long`（具体字节数由编译器实现决定）

- 符号不匹配警告：

  ```cpp
  unsigned int x = 10;
  int y = -5;
  if (y < x) { /* 可能产生逻辑错误：-5会被转换为大正数 */ }
  ```

#### (2) 固定宽度类型（C++11）

```cpp
#include <cstdint>
int8_t byte = -128;          // 精确8位有符号
uint16_t word = 65535;       // 精确16位无符号
int_least32_t val = 100000;  // 至少32位的最小类型
int_fast64_t counter = 0;    // 系统处理最快的64位类型
```

**注意**：

- 固定宽度类型需要平台支持（如`int8_t`实际是`signed char`的别名）

- 使用前检查宏定义：

  ```cpp
  static_assert(sizeof(int32_t) == 4, "Platform not support 32-bit int");
  ```

#### (3) 字面量后缀

```cpp
auto a = 42;     // int
auto b = 42U;    // unsigned int
auto c = 42L;    // long
auto d = 42ULL;  // unsigned long long
auto e = 0b1010; // C++14二进制字面量
```

**类型推导规则**：

- 无后缀：选择`int`→`long`→`long long`中第一个能容纳值的类型
- 混合符号运算时，小类型自动提升为较大类型

---

### 2. 浮点型

#### (1) 精度与范围

```cpp
float f = 3.14159f;          // 通常4字节（约7位有效数字）
double d = 2.718281828459045;// 通常8字节（约15位有效数字）
long double ld = 1.18973e+4932L;  // 扩展精度（x86通常80位）

// 科学计数法
double avogadro = 6.02214076e23;
```

#### (2) 特殊值处理

```cpp
#include <cmath>
double nan = std::nan("");       // 生成NaN
double inf = std::numeric_limits<double>::infinity();
if (std::isnan(nan)) {
    std::cout << "Not a Number detected\n";
}
if (std::isinf(inf)) {
    std::cout << "Infinity detected\n";
}
```

**注意**：

- 直接比较`NaN`会失败：`if (nan == nan)` 永远为`false`
- 运算规则：
  - $正无穷 + 正无穷 = 正无穷$
  - $有限数 / 无穷 = 0$
  - $0 * 无穷 = NaN$

---

### 3. 字符与布尔

#### (1) 字符类型

```cpp
char c = 'A';                   // 传统字符（实现定义符号性）
char16_t uc = u'好';            // UTF-16字符（C++11）
char32_t Uc = U'𐍈';             // UTF-32字符（C++11）
char8_t utf8 = u8'?';           // UTF-8字符（C++20）
const char* str = "Hello";
const char8_t* utf8_str = u8"中文";
```

#### (2) 布尔类型

```cpp
bool success = true;        // 1字节存储（非0即1）
int* ptr = nullptr;
if (ptr) { /* 不会执行 */ } // 空指针转换为false

// 布尔代数运算
bool a = true, b = false;
bool c = a && (b || !a);    // c = false
```

**底层实现**：

- `sizeof(bool)`始终为1，但位域可压缩：

  ```cpp
  struct Packed {
      bool b1:1;
      bool b2:1;  // 总共占用1字节
  };
  ```

---

### 4. 特殊类型

#### (1) void类型

```cpp
// 函数无返回值
void log_message(const std::string& msg) {
    std::cout << msg << std::endl;
}

// 泛型指针
void* data = malloc(1024);
int* int_ptr = static_cast<int*>(data);
```

#### (2) nullptr_t

```cpp
void foo(int) { /* 处理整型 */ }
void foo(int*) { /* 处理指针 */ }

foo(0);        // 调用int版本
foo(nullptr);  // 明确调用指针版本

// 类型检查
static_assert(std::is_same_v<decltype(nullptr), std::nullptr_t>);
```

**优势**：

- 避免宏NULL的二义性（传统NULL可能是0或(void*)0）

- 支持模板类型推导：

  ```cpp
  template<typename T>
  void bar(T ptr) {
      if constexpr (std::is_same_v<T, std::nullptr_t>) {
          // 专门处理空指针
      }
  }
  ```

---

## 关键概念总结表

| 类型类别     | 典型类型         | 大小（典型值） | 特性说明                |
| ------------ | ---------------- | -------------- | ----------------------- |
| 标准整型     | `int`            | 4字节          | 平台相关，最常用        |
| 固定宽度整型 | `int32_t`        | 4字节          | 精确位宽，跨平台稳定    |
| 浮点型       | `double`         | 8字节          | 默认浮点运算类型        |
| Unicode字符  | `char16_t`       | 2字节          | UTF-16编码              |
| 布尔类型     | `bool`           | 1字节          | 值只能是0或1            |
| 空类型       | `void`           | N/A            | 用于指针泛型/函数返回值 |
| 空指针类型   | `std::nullptr_t` | 平台相关       | 类型安全的空指针表示    |

---

**最佳实践**：

1. 优先使用`int`进行常规整数运算

2. 需要精确位宽时使用`<cstdint>`类型

3. 浮点比较需考虑精度容差：

   ```cpp
   bool is_equal(double a, double b) {
       return std::abs(a - b) < 1e-9;
   }
   ```

4. 避免使用`void*`，优先使用模板或继承实现泛型

5. 始终用`nullptr`替代NULL或0表示空指针

# 复合数据类型

---

## 一、数组与容器

---

### 1. 静态数组与多维数组

```cpp
// 栈内存静态数组
int arr[5] = {1, 2, 3};  // 未初始化元素为0
char str[] = "Hello";     // 自动推导大小为6（包含'\0'）

// 多维数组（行优先存储）
int matrix[2][3] = {
    {1, 2, 3},
    {4, 5, 6}
};
std::cout << matrix[1][2] << "\n";  // 输出6
```

**内存特性**：

- 连续内存布局（行优先）
- 大小编译期确定，不可动态扩展
- 自动变量离开作用域后自动释放

---

### 2. 动态数组（std::vector）

```cpp
#include <vector>
std::vector<int> vec;
vec.reserve(10);       // 预分配容量（不初始化）
vec.push_back(42);     // 追加元素（可能触发扩容）\
// 初始化方式
std::vector<double> temps{36.5, 37.0, 38.2};
std::vector<std::string> names(5, "Unknown");  // 5个"Unknown"
// 扩容机制示例
std::vector<int> v;
for (int i=0; i<100; ++i) {
    v.push_back(i);
    std::cout << "Size: " << v.size() 
              << ", Capacity: " << v.capacity() << "\n";
}
```

**关键机制**：

- 扩容策略：通常按1.5或2倍增长（实现依赖）
- 内存连续性保证（可通过`data()`获取原始指针）
- 移动语义优化（`std::move`转移元素所有权）

---

### 3. C风格字符串安全隐患

```cpp
char buffer[10];
strcpy(buffer, "1234567890");  // 缓冲区溢出！缺少终止符空间

// 安全替代方案
std::string safe_str = "Safe string";
std::strncpy(buffer, safe_str.c_str(), sizeof(buffer)-1);
buffer[sizeof(buffer)-1] = '\0';  // 强制终止
```

**常见风险**：

- 缓冲区溢出漏洞（可被利用执行任意代码）
- 未正确终止字符串导致内存越界访问
- 推荐使用`std::string`替代原始字符数组

---

## 二、自定义类型

---

### 1. 结构体与内存对齐

```cpp
struct Data {
    char c;      // 1字节
    int i;       // 4字节（通常需要4对齐）
    double d;    // 8字节
};  // sizeof(Data) = 1 + 3（填充） + 4 + 8 = 16（假设8字节对齐）

// 手动对齐控制
struct alignas(16) AlignedData {
    float x, y, z;
};  // sizeof(AlignedData) = 16
```

**对齐规则**：

- 成员偏移地址必须是其类型大小的整数倍
- `sizeof`包含填充字节
- 使用`#pragma pack(n)`可修改对齐方式（谨慎使用）

---

### 2. 联合体（Union）

```cpp
union Variant {
    int i;
    double d;
    char str[20];
};

Variant v;
v.i = 42;  // 此时其他成员的值未定义

// C++17带标签联合
struct SafeVariant {
    enum { INT, DOUBLE, STR } tag;
    union {
        int i;
        double d;
        char str[20];
    };
};
```

**应用场景**：

- 节省内存（同一时刻只使用一个成员）
- 类型双关（需注意严格别名规则限制）
- 网络协议解析（直接操作二进制数据）

---

### 3. 枚举类（Enum Class）

```cpp
enum class Color : uint8_t { Red=1, Green=2, Blue=3 };  // 指定底层类型
Color c = Color::Red;

// 类型安全比较
if (c == Color::Red) { /* 正确 */ }
// if (c == 1) { /* 错误：无法隐式转换 */ }

// 显式转换
int value = static_cast<int>(c);
```

**优势**：

- 强作用域（必须通过枚举名访问）
- 禁止隐式类型转换
- 可指定底层存储类型优化内存

---

## 三、指针与引用

---

### 1. 原始指针陷阱

```cpp
int* ptr = new int(10);   // 分配内存
delete ptr;               // 正确释放
ptr = nullptr;            // 避免悬垂指针

// 常见错误示例
int* dangling = new int(5);
delete dangling;          // 释放内存
*dangling = 10;           // 悬垂指针访问（未定义行为）

int arr[5];
int* out = &arr[5];       // 越界指针（合法地址但不可解引用）
```

**防范措施**：

- 初始化时设为`nullptr`
- 使用RAII包装器（智能指针）
- 遵循单一所有权原则

---

### 2. 引用本质

```cpp
int x = 10;
int& ref = x;     // 引用必须初始化
ref = 20;         // 修改x的值

// 编译后等价于指针操作（但语法更安全）
int* const ptr = &x;
*ptr = 20;

// 函数参数示例
void swap(int& a, int& b) {
    int tmp = a;
    a = b;
    b = tmp;
}
```

**关键特性**：

- 必须绑定有效对象（无空引用）
- 不能重新绑定（始终指向初始对象）
- 自动解引用，无需`*`操作符

---

### 3. 性能对比（传参场景）

```cpp
struct BigData { int buffer[1024]; };

// 传值：拷贝整个结构体（高开销）
void process_value(BigData data);

// 传const引用：零拷贝，只读访问
void process_cref(const BigData& data);

// 传右值引用：支持移动语义
void process_rref(BigData&& data);
```

**性能准则**：

- 小对象（<=寄存器大小）优先传值
- 大对象使用`const T&`避免拷贝
- 需要修改原始对象时使用`T&`
- 支持移动语义的场景使用`T&&`

---

## 复合数据类型对比表

| 类型        | 存储位置  | 大小可变 | 内存管理 | 典型用途             |
| ----------- | --------- | -------- | -------- | -------------------- |
| 静态数组    | 栈/静态区 | 否       | 自动     | 固定大小数据集合     |
| std::vector | 堆        | 是       | 自动     | 动态扩容数据集       |
| 结构体      | 连续内存  | 编译期定 | 手动     | 数据聚合             |
| 联合体      | 共享内存  | 固定     | 手动     | 内存复用场景         |
| 原始指针    | 堆/栈     | -        | 手动     | 低级内存操作         |
| 引用        | 别名      | -        | 自动     | 函数参数、返回值优化 |

---

**最佳实践**：

1. 优先使用`std::vector`替代原始数组
2. 结构体成员按对齐需求排序（从大到小）
3. 使用`enum class`替代传统枚举
4. 避免裸指针，使用`std::unique_ptr`/`std::shared_ptr`
5. 大对象传参使用`const T&`或移动语义
6. 对联合体访问添加类型标签保证安全性

```cpp
// 综合示例：安全类型转换
template<typename T>
T safe_deref(void* ptr) {
    if (!ptr) throw std::invalid_argument("Null pointer");
    return *static_cast<T*>(ptr);
}
```

# 动态内存管理

---

## 一、手动内存管理

---

### 1. `new`/`delete`底层机制

```cpp
// 全局operator new重载示例
void* operator new(size_t size) {
    std::cout << "Allocating " << size << " bytes\n";
    return malloc(size);
}

// 自定义类内存管理
class Widget {
public:
    Widget() { /* 可能抛出异常 */ }
    ~Widget() { /* 资源释放 */ }
};

try {
    Widget* obj = new Widget;  // 1. 调用operator new分配内存
                                // 2. 调用构造函数（若失败，自动释放内存）
} catch (const std::bad_alloc& e) {
    std::cerr << "Allocation failed: " << e.what() << "\n";
}
```

**异常安全机制**：

- 构造函数抛出异常时，已分配的内存会被自动回收

- `delete`操作自动调用析构函数并释放内存

- **错误示例**：

  ```cpp
  int* arr = new int[10];
  delete arr;  // 错误！应使用delete[]
  ```

---

### 2. 异常安全最佳实践

```cpp
// RAII包装器示例
class FileHandler {
    FILE* file;
public:
    explicit FileHandler(const char* filename) : file(fopen(filename, "r")) {
        if (!file) throw std::runtime_error("File open failed");
    }
    ~FileHandler() { if(file) fclose(file); }
    // 禁用拷贝（防止双重释放）
    FileHandler(const FileHandler&) = delete;
    FileHandler& operator=(const FileHandler&) = delete;
};

void process_file() {
    FileHandler f("data.bin");  // 异常安全
    // 使用文件资源...
}
```

---

## 二、智能指针

---

### 1. `unique_ptr`（独占所有权）

```cpp
#include <memory>

// 创建独占指针
auto ptr = std::make_unique<int>(42);  // C++14推荐
std::unique_ptr<int[]> arr(new int[5]{1,2,3,4,5});

// 所有权转移
auto new_owner = std::move(ptr);  // ptr变为nullptr

// 自定义删除器
auto file_deleter = [](FILE* f) { if(f) fclose(f); };
std::unique_ptr<FILE, decltype(file_deleter)> 
    file_ptr(fopen("data.txt", "r"), file_deleter);
```

**特性**：

- 零运行时开销（与裸指针相同大小）
- 禁止拷贝，只允许移动
- 适用于工厂模式返回对象

---

### 2. `shared_ptr`（共享所有权）

```cpp
struct Node {
    std::shared_ptr<Node> next;
    // std::shared_ptr<Node> prev;  // 导致循环引用
    std::weak_ptr<Node> prev;       // 正确方案
};

auto node1 = std::make_shared<Node>();
auto node2 = std::make_shared<Node>();

node1->next = node2;
node2->prev = node1;  // 使用weak_ptr打破循环

// 控制块结构
// [引用计数 | 弱引用计数 | 删除器 | 分配器 | 对象]
```

**内存优化**：

- `make_shared`单次分配对象和控制块
- `shared_ptr`大小是裸指针的两倍（含控制块指针）

---

### 3. `weak_ptr`与`make_*`函数

```cpp
auto shared = std::make_shared<std::string>("Modern C++");
std::weak_ptr<std::string> observer = shared;

if (auto locked = observer.lock()) {  // 安全访问
    std::cout << *locked << "\n";
}

// 性能对比
auto p1 = std::shared_ptr<int>(new int(10));  // 两次内存分配
auto p2 = std::make_shared<int>(20);          // 单次内存分配
```

---

## 三、内存检测工具

---

### 1. `Valgrind`基础使用

```bash
# 检测内存泄漏
valgrind --leak-check=full ./your_program

# 典型输出
==12345== 40 bytes in 1 blocks are definitely lost
==12345==    at 0x483777F: operator new[](unsigned long)
==12345==    by 0x1091FE: main (example.cpp:10)
```

**检测能力**：

- 未初始化内存访问
- 内存越界
- 双重释放
- 未配对分配/释放（new/delete[]不匹配）

---

### 2. `AddressSanitizer（ASan）`

```cpp
// 编译命令
g++ -fsanitize=address -g -O1 -o test test.cpp

// 堆溢出检测示例
void heap_buffer_overflow() {
    int* arr = new int[10];
    arr[10] = 0;  // 错误写入
    delete[] arr;
}
```

**实时检测特性**：

- 立即崩溃并定位错误位置
- 支持检测栈/全局变量溢出
- 内存消耗比Valgrind少

---

## 内存管理方案对比

| 管理方式         | 优点               | 缺点                   | 适用场景           |
| ---------------- | ------------------ | ---------------------- | ------------------ |
| 手动`new/delete` | 完全控制           | 易出错，需严格配对     | 底层优化，特殊需求 |
| `unique_ptr`     | 零开销，独占所有权 | 不可共享               | 单一所有者资源管理 |
| `shared_ptr`     | 自动生命周期管理   | 循环引用风险，性能开销 | 共享所有权场景     |
| 内存池           | 减少碎片，快速分配 | 实现复杂               | 高频小对象分配     |

---

## 最佳实践

1. **优先使用智能指针**：

   ```cpp
   auto data = std::make_shared<DataSet>();  // 替代new DataSet
   ```

2. **避免裸指针所有权传递**：

   ```cpp
   void process(std::unique_ptr<Data> ptr);  // 明确所有权转移
   ```

3. **异常安全设计**：

   ```cpp
   try {
       auto res = std::make_unique<Resource>();
       res->initialize();  // 可能抛出异常
   } catch (...) {
       // unique_ptr自动释放内存
   }
   ```

4. **内存检测集成**：

   ```cmake
   # CMake中全局启用ASan
   add_compile_options(-fsanitize=address)
   add_link_options(-fsanitize=address)
   ```

5. **性能关键代码优化**：

   ```cpp
   // 预分配对象池
   static std::vector<std::unique_ptr<Object>> object_pool;
   ```

---

```cpp
// 综合示例：安全内存管理
class DatabaseConnection {
    std::unique_ptr<Connection> conn;
public:
    DatabaseConnection() : conn(create_connection()) {}
    
    void query(const std::string& sql) {
        if (!conn) throw std::runtime_error("No active connection");
        // 执行查询...
    }
    
    ~DatabaseConnection() {
        if (conn) close_connection(conn.release());
    }
};
```

# 类型系统与转换

---

## 一、类型转换

---

### 1. 隐式转换的风险

```cpp
// 窄化转换示例
double d = 3.1415926;
int i = d;  // 隐式转换，丢失精度（编译器可能产生警告）
char c = 300; // 溢出（实际值为44）

// 类类型隐式转换
class MyString {
public:
    MyString(const char*) { /* 允许隐式转换 */ }
};
void processString(MyString s) {}
processString("hello");  // 隐式构造MyString对象

// 使用explicit阻止隐式转换
class SafeInt {
public:
    explicit SafeInt(int x) : val(x) {}
private:
    int val;
};
// SafeInt s = 42;  // 错误：explicit构造函数禁止隐式转换
SafeInt s(42);      // 正确：显式构造
```

**关键问题**：

- 数值类型转换可能丢失精度或溢出
- 隐式构造可能产生非预期对象
- 解决方案：
  - 启用编译警告（`-Wconversion`）
  - 对单参数构造函数使用`explicit`
  - 使用`static_cast`显式转换

---

### 2. 动态类型转换（dynamic_cast）

```cpp
class Base {
public:
    virtual ~Base() = default;  // 必须包含虚函数
};
class Derived : public Base {};
class Unrelated {};

Base* b1 = new Derived;
Base* b2 = new Base;

// 指针转换（失败返回nullptr）
Derived* d1 = dynamic_cast<Derived*>(b1);  // 成功
Derived* d2 = dynamic_cast<Derived*>(b2);  // 失败，d2 == nullptr

// 引用转换（失败抛bad_cast异常）
try {
    Derived& rd = dynamic_cast<Derived&>(*b2);  // 抛出std::bad_cast
} catch (const std::bad_cast& e) {
    std::cerr << "转换失败: " << e.what() << "\n";
}
```

**RTTI依赖**：

- 需要启用运行时类型信息（默认开启，可通过`-fno-rtti`禁用）

- `typeid`运算符示例：

  ```cpp
  #include <typeinfo>
  std::cout << typeid(*b1).name() << "\n";  // 输出类型名称（编译器相关）
  ```

---

### 3. 常量性转换（const_cast）

```cpp
// 合法场景：去除底层const
const int* pci = new int(10);
int* pi = const_cast<int*>(pci);  // 合法但危险
*pi = 20;  // 若原始对象为const定义，则UB

// 兼容旧接口案例
void legacy_print(char* str);
const char* msg = "hello";
legacy_print(const_cast<char*>(msg));  // 安全，前提不修改内容

// 错误用法示例
const int x = 42;
int* px = const_cast<int*>(&x);
*px = 100;  // 未定义行为！
```

**安全准则**：

- 仅用于去除非真正const的限定（如指针指向的对象本身非const）
- 避免用于修改原始const对象
- 优先使用mutable成员变量替代

---

## 二、类型推断与元编程

---

### 1. `auto`类型推导

```cpp
const int& cr = 42;
auto a1 = cr;           // int（忽略顶层const和引用）
auto& a2 = cr;          // const int&
const auto a3 = cr;     // const int

// 推导规则对比
int arr[3];
auto p1 = arr;          // int*（数组退化为指针）
decltype(auto) p2 = arr;// int(&)[3]（保留数组引用）

// 函数返回类型推导
auto add(int a, int b) -> int { return a + b; }  // 尾置返回类型
auto modern_add(auto a, auto b) { return a + b; } // C++20缩写函数模板
```

**推导规则**：

- 忽略顶层const和引用
- 数组/函数退化为指针
- 使用`decltype(auto)`保留完整类型信息

---

### 2. `decltype`与类型特征

```cpp
int x = 0;
const int& crx = x;

decltype(x) y = 10;         // int
decltype(crx) z = x;        // const int&
decltype((x)) ref = x;      // int&（括号导致表达式类型）

// 类型特征应用
#include <type_traits>
static_assert(std::is_same_v<decltype(x), int>);
static_assert(std::is_reference_v<decltype(ref)>);

// 编译时类型检查
template<typename T>
void process(T val) {
    if constexpr (std::is_pointer_v<T>) {
        std::cout << *val << "\n";
    } else {
        std::cout << val << "\n";
    }
}
```

---

### 3. 类型别名与模板

```cpp
// 基本类型别名
using Byte = unsigned char;

// 模板别名
template<typename T>
using Matrix = std::vector<std::vector<T>>;

Matrix<double> mat(3, std::vector<double>(3));

// 元编程辅助
template<typename T>
using RemoveCVRef = std::remove_cv_t<std::remove_reference_t<T>>;

// 使用示例
RemoveCVRef<const int&> plain_int = 42;  // int
```

---

## 三、类型转换总结表

| 转换方式           | 语法           | 安全性 | 典型应用场景               |
| ------------------ | -------------- | ------ | -------------------------- |
| 隐式转换           | 自动           | 低     | 数值提升、类构造函数       |
| `static_cast`      | 显式类型转换   | 中     | 相关类型转换、`void*`转换  |
| `dynamic_cast`     | 运行时类型检查 | 高     | 多态类型安全向下转型       |
| `const_cast`       | 常量性修改     | 低     | 兼容旧接口、去除`volatile` |
| `reinterpret_cast` | 二进制重新解释 | 最低   | 底层指针操作               |

---

## 最佳实践

1. **优先使用C++风格转换**：

   ```cpp
   // 避免C风格转换
   double d = 3.14;
   int i = static_cast<int>(d);  // 替代 (int)d
   ```

2. **类型安全设计**：

   ```cpp
   // 使用enum class替代整型标记
   enum class Mode { Read, Write };
   void set_mode(Mode m);  // 类型安全接口
   ```

3. **模板元编程技巧**：

   ```cpp
   // SFINAE类型约束（C++11）
   template<typename T>
   auto length(const T& t) -> decltype(t.size(), size_t()) {
       return t.size();
   }
   
   // C++20概念替代方案
   template<std::ranges::range R>
   size_t safe_length(R&& r) {
       return std::ranges::size(r);
   }
   ```

4. **调试类型信息**：

   ```cpp
   // 运行时类型信息输出
   template<typename T>
   void type_debug() {
       std::cout << "Type: " << typeid(T).name() 
                 << "\nSize: " << sizeof(T) << " bytes\n";
   }
   ```

5. **安全类型擦除**：

   ```cpp
   // 使用std::any和std::variant替代void*
   std::any data = std::make_any<std::string>("type safe");
   try {
       auto s = std::any_cast<std::string>(data);
   } catch (const std::bad_any_cast&) {
       // 类型不匹配处理
   }
   ```

---

```cpp
// 综合示例：安全类型转换框架
template<typename To, typename From>
To safe_cast(const From& from) {
    if constexpr (std::is_pointer_v<From> && std::is_polymorphic_v<std::remove_pointer_t<From>>) {
        // 动态指针转换
        if (auto* result = dynamic_cast<To>(from)) 
            return result;
        throw std::bad_cast();
    } else if constexpr (std::is_convertible_v<From, To>) {
        // 安全隐式转换
        return static_cast<To>(from);
    } else {
        // 不兼容类型
        static_assert(std::is_void_v<To>, "Types are not convertible");
    }
}
```

# 高级内存技术

---

## 一、内存控制

---

### 1. 内存池设计

```cpp
// 简易内存池实现（固定大小块）
class MemoryPool {
    struct Block { Block* next; };
    Block* freeList = nullptr;
    size_t blockSize;
    size_t poolSize;

public:
    MemoryPool(size_t blockSize, size_t numBlocks)
        : blockSize(blockSize), poolSize(numBlocks * blockSize) {
        char* pool = new char[poolSize];
        for (size_t i = 0; i < numBlocks; ++i) {
            Block* blk = reinterpret_cast<Block*>(pool + i * blockSize);
            blk->next = freeList;
            freeList = blk;
        }
    }

    void* allocate() {
        if (!freeList) return nullptr;
        Block* blk = freeList;
        freeList = freeList->next;
        return blk;
    }

    void deallocate(void* ptr) {
        Block* blk = static_cast<Block*>(ptr);
        blk->next = freeList;
        freeList = blk;
    }

    ~MemoryPool() { delete[] reinterpret_cast<char*>(freeList); }
};

// 使用示例
MemoryPool pool(sizeof(int), 100);
int* num = static_cast<int*>(pool.allocate());
*num = 42;
pool.deallocate(num);
```

**优化优势**：

- 减少内存分配系统调用开销
- 避免内存碎片化
- 提升缓存局部性（连续分配）

---

### 2. 自定义分配器

```cpp
#include <memory>

template<typename T>
class AlignedAllocator {
public:
    using value_type = T;
    
    AlignedAllocator() = default;

    template<typename U>
    AlignedAllocator(const AlignedAllocator<U>&) {}

    T* allocate(size_t n) {
        constexpr size_t alignment = alignof(T);
        void* ptr = aligned_alloc(alignment, n * sizeof(T));
        if (!ptr) throw std::bad_alloc();
        return static_cast<T*>(ptr);
    }

    void deallocate(T* p, size_t) {
        free(p);
    }
};

// 在容器中使用
std::vector<int, AlignedAllocator<int>> vec;
vec.reserve(1024);  // 内存对齐分配
```

**关键特性**：

- 实现`allocate`和`deallocate`方法
- 支持类型对齐要求（如SIMD指令需要16/32字节对齐）
- 可与标准容器无缝集成

---

## 二、对象生命周期管理

---

### 1. Placement New

```cpp
// 预分配内存池
alignas(std::string) char buffer[sizeof(std::string) * 10];

// 在指定位置构造对象
std::string* s = new (buffer) std::string("Hello");

// 显式调用析构函数
s->~basic_string();

// 应用场景：对象池
class ObjectPool {
    std::vector<void*> memoryBlocks;
public:
    template<typename T, typename... Args>
    T* create(Args&&... args) {
        void* mem = allocate(sizeof(T));
        return new (mem) T(std::forward<Args>(args)...);
    }

    template<typename T>
    void destroy(T* obj) {
        obj->~T();
        deallocate(obj);
    }
};
```

**注意事项**：

- 必须手动管理对象生命周期
- 内存对齐需满足类型要求
- 析构顺序需与构造顺序相反

---

### 2. 移动语义优化

```cpp
class Matrix {
    size_t rows, cols;
    std::unique_ptr<float[]> data;

public:
    Matrix(size_t r, size_t c) : rows(r), cols(c), 
        data(std::make_unique<float[]>(r * c)) {}

    // 移动构造函数
    Matrix(Matrix&& other) noexcept 
        : rows(other.rows), cols(other.cols), data(std::move(other.data)) {
        other.rows = other.cols = 0;
    }

    // 移动赋值运算符
    Matrix& operator=(Matrix&& other) noexcept {
        if (this != &other) {
            rows = other.rows;
            cols = other.cols;
            data = std::move(other.data);
            other.rows = other.cols = 0;
        }
        return *this;
    }
};
```

**优化效果**：

- 避免大规模数据拷贝
- 支持STL容器的高效扩容
- 提升资源转移效率

---

## 三、底层优化

---

### 1. 内存对齐控制

```cpp
struct Unoptimized {
    char c;     // 1字节
    double d;   // 8字节（需要7字节填充）
    int i;      // 4字节（需要4字节填充）
};  // 总大小：1 + 7 + 8 + 4 + 4 = 24字节

struct Optimized {
    double d;   // 8字节
    int i;      // 4字节
    char c;     // 1字节（需要3字节填充）
};  // 总大小：8 + 4 + 1 + 3 = 16字节

// 强制对齐
struct alignas(64) CacheLineAligned {
    int data[16];
};  // 确保结构体与CPU缓存行对齐（通常64字节）
```

**优化原则**：

- 按成员大小降序排列
- 使用`alignof`查询对齐要求
- 通过`alignas`指定特殊对齐

---

### 2. 原子操作与内存顺序

```cpp
#include <atomic>
#include <thread>

std::atomic<int> counter{0};

void increment(int n) {
    for (int i = 0; i < n; ++i) {
        counter.fetch_add(1, std::memory_order_relaxed);
    }
}

// 内存屏障示例
std::atomic<bool> flag{false};
int data = 0;

void producer() {
    data = 42;  // 普通写操作
    flag.store(true, std::memory_order_release);
}

void consumer() {
    while (!flag.load(std::memory_order_acquire));
    assert(data == 42);  // 保证看到producer的写操作
}
```

**内存顺序类型**：

- `memory_order_relaxed`：无顺序保证（计数器）
- `memory_order_acquire/release`：同步特定内存访问
- `memory_order_seq_cst`：全局顺序保证（默认）

---

## 四、并发内存模型

---

### 1. 无锁数据结构的内存回收

```cpp
// Hazard Pointer 示例
template<typename T>
class LockFreeStack {
    struct Node {
        T data;
        Node* next;
    };

    std::atomic<Node*> head;
    thread_local static std::vector<Node*> retired;  // 线程本地回收列表

    void retire(Node* old) {
        retired.push_back(old);
        if (retired.size() >= 100) {
            scan();  // 定期安全回收
        }
    }

    void scan() {
        // 检查其他线程是否正在访问待回收节点
        // 安全时执行delete操作
    }

public:
    void push(const T& value) {
        Node* new_node = new Node{value, head.load()};
        while (!head.compare_exchange_weak(new_node->next, new_node));
    }

    bool pop(T& value) {
        Node* old_head = head.load();
        // 注册Hazard Pointer
        do {
            if (!old_head) return false;
        } while (!head.compare_exchange_weak(old_head, old_head->next));
        value = old_head->data;
        retire(old_head);
        return true;
    }
};
```

**Hazard Pointer原理**：

1. 每个线程维护正在访问的指针列表
2. 延迟回收可能被其他线程访问的内存
3. 定期扫描确定安全回收时机

---

## 高级内存技术对比

| 技术           | 适用场景       | 优点                | 缺点                 |
| -------------- | -------------- | ------------------- | -------------------- |
| 内存池         | 高频小对象分配 | 减少碎片，快速分配  | 固定块大小，灵活性低 |
| 自定义分配器   | 特殊内存需求   | 与STL集成，控制底层 | 实现复杂，调试困难   |
| Placement New  | 对象复用场景   | 避免重复内存分配    | 生命周期管理复杂     |
| 原子操作       | 多线程共享数据 | 无锁并发            | 内存顺序理解成本高   |
| Hazard Pointer | 无锁数据结构   | 安全内存回收        | 实现复杂，性能开销   |

---

## 最佳实践

1. **优先使用标准库工具**：

   ```cpp
   // 使用std::pmr::memory_resource实现内存池
   #include <memory_resource>
   std::pmr::unsynchronized_pool_resource pool;
   std::pmr::vector<int> vec{&pool};
   ```

2. **性能敏感代码优化**：

   ```cpp
   // 预分配内存避免运行时分配
   static thread_local std::vector<int> local_buffer;
   local_buffer.reserve(1024);
   ```

3. **内存诊断工具集成**：

   ```bash
   # 使用gperftools分析内存分配
   HEAPPROFILE=./heap_profile ./your_program
   pprof --svg ./your_program ./heap_profile.0001.heap > profile.svg
   ```

4. **跨平台对齐处理**：

   ```cpp
   #if defined(_MSC_VER)
   #define ALIGNED_ALLOC(size, align) _aligned_malloc(size, align)
   #else
   #define ALIGNED_ALLOC(size, align) aligned_alloc(align, size)
   #endif
   ```

5. **无锁编程准则**：

   - 避免在无锁代码中执行阻塞操作
   - 使用成熟的原子操作库（如Folly的AtomicHashMap）
   - 定期进行竞态条件检测（TSan工具）

---

```cpp
// 综合示例：内存池支持的STL容器
template<typename T>
using PoolAllocatedVector = std::vector<T, AlignedAllocator<T>>;

void process_data() {
    // 使用自定义内存池
    static MemoryPool pool(sizeof(float), 4096);
    
    PoolAllocatedVector<float> data;
    data.reserve(1000);  // 从内存池分配
    
    // 并行处理（无锁）
    std::atomic<int> processed{0};
    #pragma omp parallel for
    for (int i = 0; i < 1000; ++i) {
        data[i] = compute_value(i);
        processed.fetch_add(1, std::memory_order_relaxed);
    }
}
```

# 扩展与实践

---

## 一、现代C++新特性

---

### 1. C++17 `std::byte` 与内存操作

```cpp
#include <cstddef>
#include <cstring>

void memory_ops_example() {
    std::byte buffer[16];  // 未初始化的原始内存
    std::memset(buffer, 0xAA, sizeof(buffer));  // 填充数据

    // 类型安全的内存操作
    std::byte* ptr = buffer;
    *(reinterpret_cast<uint32_t*>(ptr)) = 0xDEADBEEF;  // 传统方式
    std::to_address(ptr + 4);  // C++17安全获取地址

    // 内存构造/析构
    struct Data { int x; float y; };
    Data* data = new (buffer) Data{42, 3.14f};  // Placement new
    data->~Data();  // 显式析构
}

// std::byte特性：
// - 明确表示原始内存（非字符类型）
// - 支持位运算操作（|, &, ~, ^）
```

---

### 2. C++20 内存工具

```cpp
#include <memory>

struct Widget {
    int id;
    std::string name;
};

void cpp20_memory_ops() {
    // 分配未初始化内存
    Widget* w = static_cast<Widget*>(::operator new(sizeof(Widget)));
    
    // C++20安全构造/析构
    std::construct_at(w, 1001, "C++20");  // 替代placement new
    std::destroy_at(w);                   // 替代显式析构调用
    
    ::operator delete(w);
}

// 优势：
// 1. 更清晰的语义
// 2. 支持constexpr上下文
// 3. 更好的异常安全保证
```

---

## 二、实战案例

---

### 1. 实现简易动态数组

```cpp
template<typename T>
class SimpleVector {
    T* data = nullptr;
    size_t capacity = 0;
    size_t size = 0;

    void reallocate(size_t new_cap) {
        T* new_data = static_cast<T*>(::operator new(new_cap * sizeof(T)));
        
        // 移动已有元素
        for (size_t i=0; i<size; ++i) {
            new (new_data+i) T(std::move(data[i]));
            data[i].~T();
        }
        
        ::operator delete(data);
        data = new_data;
        capacity = new_cap;
    }

public:
    void push_back(const T& value) {
        if (size >= capacity) {
            reallocate(capacity ? capacity*2 : 1);
        }
        new (data + size) T(value);  // Placement new
        ++size;
    }

    T& operator[](size_t index) { 
        return data[index]; 
    }

    ~SimpleVector() {
        for (size_t i=0; i<size; ++i) {
            data[i].~T();
        }
        ::operator delete(data);
    }
};

// 使用示例
SimpleVector<std::string> vec;
vec.push_back("Modern");
vec.push_back("C++");
```

**关键优化**：

- 移动语义减少拷贝开销
- 异常安全保证（如果构造失败自动析构已创建对象）
- 精确控制内存生命周期

---

### 2. 多线程内存管理

```cpp
#include <mutex>
#include <atomic>
#include <vector>

class ThreadSafeAllocator {
    std::mutex mtx;
    std::vector<void*> free_list;
    std::atomic<size_t> total_allocs{0};

public:
    void* allocate(size_t size) {
        std::lock_guard<std::mutex> lock(mtx);
        if (!free_list.empty()) {
            auto ptr = free_list.back();
            free_list.pop_back();
            return ptr;
        }
        total_allocs.fetch_add(1, std::memory_order_relaxed);
        return ::operator new(size);
    }

    void deallocate(void* ptr) noexcept {
        std::lock_guard<std::mutex> lock(mtx);
        free_list.push_back(ptr);
    }

    ~ThreadSafeAllocator() {
        for (auto ptr : free_list) {
            ::operator delete(ptr);
        }
    }
};

// 使用示例
ThreadSafeAllocator allocator;

void worker() {
    int* arr = static_cast<int*>(allocator.allocate(1024 * sizeof(int)));
    // 使用内存...
    allocator.deallocate(arr);
}
```

**线程安全策略**：

- 互斥锁保护空闲列表
- 原子计数器统计分配次数
- 对象池减少系统调用

---

## 三、调试工具链

---

### 1. GDB内存调试

```bash
# 编译带调试信息
g++ -g -O0 -o test test.cpp

# 启动GDB
gdb ./test

# 常用命令
(gdb) break main            # 设置断点
(gdb) run                   # 启动程序
(gdb) print sizeof(Data)    # 查看类型大小
(gdb) x/16xb &buffer        # 查看内存十六进制内容
(gdb) info registers        # 查看寄存器状态
(gdb) backtrace             # 查看调用栈
```

**内存布局观察技巧**：

- 使用`pahole`工具分析结构体布局
- 通过`ptype`命令查看类型信息
- `watch`命令监控内存变化

---

### 2. 性能分析工具

```bash
# 使用perf进行性能分析
perf record -g ./your_program   # 记录性能数据
perf report                     # 查看热点分析

# Intel VTune基本使用
vtune -collect hotspots -result-dir vtune_data ./your_program
vtune -report summary -result-dir vtune_data

# Valgrind内存检测
valgrind --tool=memcheck --leak-check=full ./your_program
```

**性能优化重点**：

- 缓存未命中（Cache misses）
- 分支预测失败（Branch mispredictions）
- 内存分配热点（Memory allocation hotspots）

---

## 四、现代C++工程实践

---

### 1. 模块化编程（C++20 Modules）

```cpp
// math.ixx
export module math;

export namespace math {
    template<typename T>
    T add(T a, T b) { return a + b; }
}

// main.cpp
import math;

int main() {
    auto result = math::add(3.14, 2.718);
    return 0;
}
```

**优势**：

- 加快编译速度
- 避免头文件重复包含
- 更好的封装性

---

### 2. 协程实践（C++20）

```cpp
#include <coroutine>
#include <iostream>

struct Generator {
    struct promise_type {
        int current_value;
        
        Generator get_return_object() { 
            return Generator{std::coroutine_handle<promise_type>::from_promise(*this)};
        }
        auto initial_suspend() { return std::suspend_always{}; }
        auto final_suspend() noexcept { return std::suspend_always{}; }
        void return_void() {}
        auto yield_value(int value) {
            current_value = value;
            return std::suspend_always{};
        }
        void unhandled_exception() { std::terminate(); }
    };

    std::coroutine_handle<promise_type> handle;
    
    bool next() { 
        if (!handle.done()) {
            handle.resume();
            return !handle.done();
        }
        return false;
    }
    int value() { return handle.promise().current_value; }
    ~Generator() { if (handle) handle.destroy(); }
};

Generator range(int start, int end) {
    for (int i = start; i < end; ++i) {
        co_yield i;
    }
}

// 使用示例
int main() {
    auto gen = range(1, 5);
    while (gen.next()) {
        std::cout << gen.value() << " ";  // 输出1 2 3 4
    }
}
```

---

## 五、持续集成与质量保证

---

### 1. 静态分析集成

```yaml
# .github/workflows/ci.yml
name: C++ CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Static Analysis
      run: |
        clang-tidy --checks='*' src/*.cpp --
        cppcheck --enable=all src/
```

**推荐工具**：

- Clang-Tidy（代码风格、潜在错误）
- Cppcheck（内存泄漏、未定义行为）
- SonarQube（代码质量门户）

---

### 2. 性能基准测试

```cpp
#include <benchmark/benchmark.h>

static void BM_VectorPushBack(benchmark::State& state) {
    for (auto _ : state) {
        std::vector<int> v;
        v.reserve(state.range(0));
        for (int i = 0; i < state.range(0); ++i) {
            v.push_back(i);
        }
    }
}
BENCHMARK(BM_VectorPushBack)->Arg(100)->Arg(1000);

BENCHMARK_MAIN();
```

**测试要点**：

- 多尺寸参数测试（`->ArgsProduct({{100, 1000}, {64, 256}})`）
- 内存分配追踪（`benchmark::MemoryUsage()`）
- 结果可视化（Google Charts或Python Matplotlib）

---

## 工程实践总结

| 实践领域     | 推荐工具/技术          | 关键收益               |
| ------------ | ---------------------- | ---------------------- |
| 内存管理     | 自定义分配器、内存池   | 性能提升，减少碎片     |
| 并发编程     | 原子操作、无锁数据结构 | 高吞吐量，低延迟       |
| 代码质量     | Clang-Tidy、SonarQube  | 减少缺陷，提升可维护性 |
| 性能优化     | perf、VTune            | 定位瓶颈，精准优化     |
| 现代语言特性 | 协程、模块、概念       | 提升开发效率，代码简洁 |

---

```cpp
// 综合示例：现代C++工程模板
import std.core;  // C++23标准库模块

template<std::integral T>  // C++20概念约束
class ThreadSafeCache {
    std::unordered_map<T, std::string> cache;
    mutable std::shared_mutex mtx;

public:
    void update(T id, std::string value) {
        std::unique_lock lock(mtx);
        cache[id] = std::move(value);
    }

    std::optional<std::string> get(T id) const {
        std::shared_lock lock(mtx);
        if (auto it = cache.find(id); it != cache.end()) {
            return it->second;
        }
        return std::nullopt;
    }
};

// 使用协程异步加载
Task<void> async_load_data(ThreadSafeCache<int>& cache) {
    auto data = co_await fetch_from_network();
    cache.update(data.id, data.content);
}
```